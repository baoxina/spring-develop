AOP概念
	1.aop：面向切面(方面)编程，扩展功能不修改原来的代码实现
	2.AOP采取横向抽取机制，取代传统纵向继承体系重复性代码
AOP横向抽取机制：底层使用   动态代理机制  实现
	动态代理 
		第一种情况(使用jdk动态代理，针对有接口的情况)：使用动态代理方式，创建  接口实现类代理对象
			public interface Dao{
				public void add();
			}
			
			public class DaoImpl implemnets Dao{
				public void add(){
					//添加逻辑
				}
			}
			创建和DaoImpl类平级的对象，这个对象不是真正的对象，它为了增强被代理的对象，实现和DaoImpl相同的功能
		第二种情况(使用cglib动态代理，针对没有接口的情况)
			public class User{
				public void add(){
					
				}
			}
			动态代理实现
				创建User类的子类的代理对象
				在子类里面调用父类的方法完成增强
				
AOP操作术语
	public class User{
		public void add(){
		
		}
		public void update(){
		
		}
		public void delete(){
		
		}
		public User[] findAll(){
		
		}
	}
	JoinPoint(连接点):类里面可以被增强的方法，这些方法称为 连接点
	PointCut(切入点)：所谓切入点是指我们要对哪些连接点进行增强，这些要增强的连接点就称为切入点
		比如实际操作中，只是要增强add方法和update方法，实际增强的方法称为切入点
	Advice(通知/增强):增强的逻辑称为增强。比如扩展日志功能，这个日志功能称为增强
		前置通知：在切入点对应的方法被调用之前执行
		后置通知：在切入点对应的方法被调用之后执行
		异常通知：在切入点对应的方法被调用的过程中出现异常时执行
		最终通知：在后置之后执行
		环绕通知：在切入点对应的方法被调用之前(前置之后)和之后(后置之前)都执行
	Aspect(切面): 把增强应用到具体方法上面，这个过程称为切面.即把增强应用到切入点的过程
	Introduction(引介):引介是一种特殊的通知，在不修改类代码的前提下，Introduction可以在运行qi为类动态地添加一些方法或属性
	Target(目标对象):代理的目标对象，即要增强的类称为目标对象
	Weaving(织入)：是把增强应用到目标的过程，即把advice应用到target的过程
	Proxy(代理)：一个类被AOP织入增强后，就产生了一个结果代理类，这个代理类就称为Proxy
	
	使用表达式配置切入点
	常用表达式
	execution(<访问修饰符> <返回类型><方法名>(<参数>)<异常>)
		1.execution(* com.baoxina.spring.aop_level_one.Book.add(..)) 对Book类中的add方法进行增强
		2.execution(* com.baoxina.spring.aop_level_one.Book.*(..)) 对Book类中的所有方法进行增强
		3.execution(* *.*(..)) //对所有类的所有方法进行增强	
		4.execution(* save*(..))  匹配所有以save开头的方法
			